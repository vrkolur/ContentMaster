c
@params[:author_id].nil? && @params[:title].nil? && @params[:category_id].nil? && @current_user.nil? 
c
@params[:author_id].nil? && @params[:title].nil? && @params[:category_id].nil? && @current_user.nil?
c
@params[:author_id].nil?
@params[:author_id]
params[:author_id]
params
params[:author_id]
@params[:author_id].nil? && @params[:title].nil? && @params[:category_id].nil? && @current_user.nil? 
c
@notification = Message.create(sender:@current_user, reciever:@author, msg: msg)
msg = "Hey your article with title: #{@article.title} and Category: #{@article.category.title} has been rejected and destroyed by your Admin"
c
@current_user
@notification.errors.full_messages
@notification.errors.any?
@notification = Message.create(sender:@current_user, reciever:@author, msg: msg)
msg = "Hey your article with title: #{@article.title} and Category: #{@article.category.title} has been rejected and destroyed by your Admin"
=> 11:             msg = "Hey your article with title: #{@article.title} and Category: #{@article.category.title} has been rejected and destroyed by your Admin"
@article
c
params
c
client_user.client == @client 
client_user = ClientUser.find_by(user: current_user)
c
@client = Client.find_by(sub_domain: params[:client_id])
c
response.request.url
c
response.request.url
c
        @client =  Client.find_by(sub_domain: params[:client_id])
@client
params
client
client_user&.client == @client
unless client_user&.client == @client 
            redirect_to articles_path(client_id: client_user&.client&.sub_domain)
        end
        client_user = ClientUser.find_by(user: current_user) if current_user && current_user.role.title == 'ClientAdmin'
c
response
post article_assignments_path(client_id: client.sub_domain), params: {title:"NewArticle", category_id: category.id, author_id: user.id}
c
params
@client =  Client.find_by(sub_domain: params[:client_id])
c
cc
c
exit
quit
c
 @client = Client.find_by(sub_domain: params[:client_id])
c
client_user&.client == @client 
c
client_user&.client
@cliet
client_user
client_user&.client == @client 
unless client_user&.client == @client 
   33:             redirect_to articles_path(client_id: client_user.client.sub_domain)
   34:         end
unless client_user&.client == @client end
unless client_user&.client == @client 
@client = Client.find_by(sub_domain: params[:client_id])
c
response.request.url
response.requext.url
c
expect { Article.find(article.id) }.to raise_error(ActiveRecord::RecordNotFound)
=> 33:       expect { Article.find(article.id) }.to raise_error(ActiveRecord::RecordNotFound)
c
@article
unless @article 
                @article = Article.find_by(id: params[:article_id])
            end
@article = Article.find(params[:id])
expect { Article.find(article.id) }.to raise_error(ActiveRecord::RecordNotFound)
c
params
set_article
quit
set_article
params
c
params
quit
c
params
post "/#{client.sub_domain}/articles/#{article.id}/reject_article"
params
set_article
@article
client_user.client == @client 
client_user = ClientUser.find_by(user: current_user)
c
article
post "/#{client.sub_domain}/articles/#{article.id}/reject_article"
Article.all
c
Article.all
c
response.request.url
c
response.http_status
c
response.request.url
c
expect(response.request.url).to eq("http://www.example.com/#{client.sub_domain}/review_articles_new")
client
response.request.url
c
response.request.url
c
response.status
response
c
@notification.valid?
@notification.valid
@notification
@notification = Message.create!(sender:current_user, reciever:@author,msg: msg)
msg
msg = "Hey you are supposed to create a artile with title:#{params[:title]} and Category: #{Category.find_by(id: params[:category_id]).title} "
@author
msg
@notification
c
client_user
c
client_user
@client = Client.find_by(sub_domain: params[:client_id])
params
client
c
client
c
User.all
current_user
user
ClientUser.find_by(user: current_user) if current_user && current_user.role.title == 'ClientAdmin'
   30:         client_user = 
client_user
c
 expect(response).to redirect_to(articles_path(client_id: article1.client.sub_domain))
post articles_path(client_id: client1.sub_domain ,
        article: {
          title: "Article_Title",
          category_id: category.id,
          body: 'Body',
        }
      )
c
 expect(response).to redirect_to(articles_path(client_id: article1.client.sub_domain))
c
ClientUser.find(user.id)
c
ClientUser.find(user.id)
ClientUser.find(client_user.id) 
lientUser.find(client_user.id) 
c
params
c
post client_users_path(client_id: client.sub_domain, 
        client_user: {
          name:"Name",
          email:"client_user@email.com",
          role_id: 3,
          password:"password"
        }
      )
client_users_path(client_id: client.sub_domain, 
        client_user: {
          name:"Name",
          email:"client_user@email.com",
          role_id: 3,
          password:"password"
        }
      )
client_users_path(client_id: client.sub_domain)
c
params
Article.all
c
Article.all
expect(response).to redirect_to(articles_path(client_id: article1.client.sub_domain))
c
Article.all
      post articles_path(client_id: client.sub_domain), params: {
        article: {
          title: "Article_Title",
          category_id: category.id,
          body: 'Body'
        }}
Article.first
Article
c
Article.first
Article
article1
Article.all
Article.first
expect(response).to have_http_status(302)
c
client
ClientUser.all
current_user
c
user
client
client_user
ClientUser.all
c
 ClientUser
 ClientUser.find_by(id:551)
current_user
User.all
ClientUser.all
ClientUser
User.all
quit
User.all
ClientUser
ClientUser.all
Role.all
ClientUser.all
ClientUser
ClientUser.first
ClientUser
current_user
 ClientUser.find_by(user: current_user)
current_user.role.title == 'ClientAdmin'
 current_user 
client_user
c
article2
Article.all
article1
Article.all
Article
client
response
c
post new_article_assignment_path(client_id: client.sub_domain)
c
post article_approve_article_new_path(client_id: client.id, article_id: article1.id)
c
post article_approve_article_new_path(client_id: client.sub_domain, article_id: article1.id)
response
post article_approve_article_new_path(client_id: client.sub_domain, article_id: article1.id)
c
expect(response).to redirect_to(new_article_assignment_path(client_id: client.sub_domain))
c
