c
response.status
response.ststus
c
client.sub_domain
client1.sub_domain
c
@client.sub_domain
c
ClientUser.last.client.sub_domain
 articles_path(client_id: client_user.client.sub_domain)
client_user
ClientUser.first.client.sub_domain
ClienUser.first.client.sub_domain
@client.sub_domain 
c
@client.sub_domain
ClientUser.last.client.sub_domain 
ClientUser.first.client.sub_domain 
ClientUser.all.each do 
ClientUser.count
@client.sub_domain
c
response.request.url
c
response.status
c
response.request.url
c
article.status
c
@article.save
@article.status
@article.update(status: true)
c
article.title
article.status
c
@article.update(status: true)
@article
c
article
c
cc
c
@articlec
c
article.status
c
@article
@artixle
c
params
c
root_path
c
response.request.url
ClientUser.first.client.sub_domain
ClientUser.count
@client 
c
articles_path(client_id: client_user.client.sub_domain)
redirect_to articles_path(client_id: client_user.client.sub_domain)
client_user.client.sub_domain 
client_user
client_user.client == @client 
c
ClientUser.first.user.id
CLientUser.first.user.id
CLientUser.user.id
current_user
ClientUser.first.client.sub_domain
ClientUser.count
@client.sub_domain
client_user.client == @client 
c
expect(response).to redirect_to(articles_path(client_id: "Hello"))
response
response.request.url
ClientUser.first.client.sub_domain
c
@client.sub_domain
c
Client.find_by(sub_domain:"Isaura")
response.request.url
ClientUser.first.client.name
c
@client.name
@client
c
@client
ClientUser.first.client.name
Client.all
c
response.request.url
c
response.request.url
request.response.url
@client
ClientUser.first.client
ClientUser.firt.client
ClientUser.count
client_user&.client == @client 
c
client_user = FactoryBot.create(:client_user, client_id: client1.id ,user_id: user.id)
c
 client_id: client1.id
 client_id: client1.sub_domain
client_user = FactoryBot.create(:client_user, client_id: client1.sub_domain,user_id: user.id)
client1
c
@client
ClientUser.all
User.all
current_user
user
c
user.name
user
client_user
c
client
client_user
c
client
client_user
current_user
user
client_user
c
cliet_user1
1
cliet_user
c
response.request.url
c
response.request.url
c
client.sub_domain
clien.sub_domain
client
clien.sub_domain
response.request.url
c
response.status
response.request.url
c
@params[:author_id].nil? && @params[:title].nil? && @params[:category_id].nil? && @current_user.nil? 
c
@params[:author_id].nil? && @params[:title].nil? && @params[:category_id].nil? && @current_user.nil?
c
@params[:author_id].nil?
@params[:author_id]
params[:author_id]
params
params[:author_id]
@params[:author_id].nil? && @params[:title].nil? && @params[:category_id].nil? && @current_user.nil? 
c
@notification = Message.create(sender:@current_user, reciever:@author, msg: msg)
msg = "Hey your article with title: #{@article.title} and Category: #{@article.category.title} has been rejected and destroyed by your Admin"
c
@current_user
@notification.errors.full_messages
@notification.errors.any?
@notification = Message.create(sender:@current_user, reciever:@author, msg: msg)
msg = "Hey your article with title: #{@article.title} and Category: #{@article.category.title} has been rejected and destroyed by your Admin"
=> 11:             msg = "Hey your article with title: #{@article.title} and Category: #{@article.category.title} has been rejected and destroyed by your Admin"
@article
c
params
c
client_user.client == @client 
client_user = ClientUser.find_by(user: current_user)
c
@client = Client.find_by(sub_domain: params[:client_id])
c
response.request.url
c
response.request.url
c
        @client =  Client.find_by(sub_domain: params[:client_id])
@client
params
client
client_user&.client == @client
unless client_user&.client == @client 
            redirect_to articles_path(client_id: client_user&.client&.sub_domain)
        end
        client_user = ClientUser.find_by(user: current_user) if current_user && current_user.role.title == 'ClientAdmin'
c
response
post article_assignments_path(client_id: client.sub_domain), params: {title:"NewArticle", category_id: category.id, author_id: user.id}
c
params
@client =  Client.find_by(sub_domain: params[:client_id])
c
cc
c
exit
quit
c
 @client = Client.find_by(sub_domain: params[:client_id])
c
client_user&.client == @client 
c
client_user&.client
@cliet
client_user
client_user&.client == @client 
unless client_user&.client == @client 
   33:             redirect_to articles_path(client_id: client_user.client.sub_domain)
   34:         end
unless client_user&.client == @client end
unless client_user&.client == @client 
@client = Client.find_by(sub_domain: params[:client_id])
c
response.request.url
response.requext.url
c
expect { Article.find(article.id) }.to raise_error(ActiveRecord::RecordNotFound)
=> 33:       expect { Article.find(article.id) }.to raise_error(ActiveRecord::RecordNotFound)
c
@article
unless @article 
                @article = Article.find_by(id: params[:article_id])
            end
@article = Article.find(params[:id])
expect { Article.find(article.id) }.to raise_error(ActiveRecord::RecordNotFound)
c
params
set_article
quit
set_article
params
c
params
quit
c
params
post "/#{client.sub_domain}/articles/#{article.id}/reject_article"
params
set_article
@article
client_user.client == @client 
client_user = ClientUser.find_by(user: current_user)
c
article
post "/#{client.sub_domain}/articles/#{article.id}/reject_article"
Article.all
c
Article.all
c
response.request.url
c
response.http_status
c
